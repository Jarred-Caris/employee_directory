{"version":3,"sources":["components/Jumbotron/index.js","components/SearchForm/index.js","utils/API.js","components/EmployeeInfo/index.js","components/Table/index.js","App.js","reportWebVitals.js","index.js"],"names":["Jumbo","className","SearchForm","props","id","type","placeholder","aria-label","value","search","name","onChange","handleInputChange","onClick","handleFormSubmit","API","loadEmployees","axios","get","EmployeeInfo","map","employee","src","picture","thumbnail","first","last","email","phone","dob","date","login","uuid","Table","state","employees","this","getEmployees","then","res","setState","data","results","catch","err","console","log","sort","a","b","class","scope","sortByFirstName","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAgBeA,MAbf,WACE,OACE,qBAAKC,UAAU,4BAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,YAAd,8BACA,mBAAGA,UAAU,OAAb,qE,MCqBOC,MAzBf,SAAoBC,GAClB,OACE,qBAAKF,UAAU,YAAYG,GAAG,YAA9B,SACE,uBAAMH,UAAU,SAAhB,UACE,uBACEA,UAAU,oBACVI,KAAK,SACLC,YAAY,cACZC,aAAW,SACXC,MAAOL,EAAMM,OACbC,KAAK,OACLC,SAAUR,EAAMS,oBAElB,wBACEX,UAAU,0BACVI,KAAK,SACLQ,QAASV,EAAMW,iBAHjB,0B,iECROC,EANH,CACRC,cAAe,WACX,OAAOC,IAAMC,IAAI,2CCcVF,MAjBf,SAAuBb,GACnB,OACI,mCACKA,EAAMgB,aAAaC,KAAI,SAAAC,GAAQ,OAC5B,+BACI,6BAAI,qBAAKC,IAAKD,EAASE,QAAQC,cAC/B,6BAAKH,EAASX,KAAKe,QACnB,6BAAKJ,EAASX,KAAKgB,OACnB,6BAAKL,EAASM,QACd,6BAAKN,EAASO,QACd,6BAAKP,EAASQ,IAAIC,SANZT,EAASU,MAAMC,YC0C1BC,E,4MA1CbC,MAAQ,CACNC,UAAW,I,uDAEb,WACEC,KAAKC,iB,0BAGP,WAAgB,IAAD,OACbtB,EAAIC,gBAEDsB,MAAK,SAAAC,GAAG,OAAG,EAAKC,SAAS,CAAEL,UAAWI,EAAIE,KAAKC,aAE/CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,6BAG7B,WACEC,QAAQC,IAAI,WAEbV,KAAKI,SAAU,CAAEL,UAAW,YAAIC,KAAKF,MAAMC,WAAWY,MAAS,SAASC,EAAGC,GAAG,OAAQD,EAAEtC,KAAKe,MAAQwB,EAAEvC,KAAKe,OAAU,EAAI,S,oBAI5H,WAAU,IAAD,OACP,OACE,wBAAOyB,MAAM,iCAAb,UACE,gCACE,+BACE,oBAAIC,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAMtC,QAAW,WAAQ,EAAKuC,mBAAxC,wBACA,oBAAID,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,mBACA,oBAAIA,MAAM,MAAV,sBAGJ,gCACA,cAAChC,EAAD,CAAcA,aAAciB,KAAKF,MAAMC,qB,GArC3BkB,aCWLC,MAVf,WACE,OACE,sBAAKrD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCCSsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1a8acc58.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbo() {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4\">People Directory</h1>\r\n        <p className=\"lead\">\r\n          Find someone from work you may know (no stalking)\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbo;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchForm(props) {\r\n  return (\r\n    <div className=\"Searchbox\" id=\"searchBox\">\r\n      <form className=\"d-flex\">\r\n        <input\r\n          className=\"form-control me-2\"\r\n          type=\"search\"\r\n          placeholder=\"Name Search\"\r\n          aria-label=\"Search\"\r\n          value={props.search}\r\n          name=\"Name\"\r\n          onChange={props.handleInputChange}\r\n        />\r\n        <button\r\n          className=\"btn btn-outline-success\"\r\n          type=\"submit\"\r\n          onClick={props.handleFormSubmit}\r\n        >\r\n          Search\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","  \r\nimport axios from \"axios\";\r\n\r\nconst API = {\r\n    loadEmployees: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=50\");\r\n    }\r\n};\r\n\r\nexport default API\r\n","import React from \"react\";\r\n\r\nfunction loadEmployees(props) {\r\n    return (\r\n        <>\r\n            {props.EmployeeInfo.map(employee => (\r\n                < tr key={employee.login.uuid}>\r\n                    <td><img src={employee.picture.thumbnail}></img></td>\r\n                    <td>{employee.name.first}</td>\r\n                    <td>{employee.name.last}</td>\r\n                    <td>{employee.email}</td>\r\n                    <td>{employee.phone}</td>\r\n                    <td>{employee.dob.date}</td>\r\n                </tr >\r\n            ))\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default loadEmployees;","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\nimport API from \"../../utils/API\";\r\nimport EmployeeInfo from \"../EmployeeInfo/index\"\r\n\r\nclass Table extends Component {\r\n  state = {\r\n    employees: [],\r\n  };\r\n  componentDidMount() {\r\n    this.getEmployees();\r\n  }\r\n\r\n  getEmployees() {\r\n    API.loadEmployees()\r\n      // .then(res=> this.setState({ employees: [...res.data.results].sort((function(a, b){return (a.name.first < b.name.first) ? -1 : 1}))\r\n      .then(res=> this.setState({ employees: res.data.results\r\n      }))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n   sortByFirstName () {\r\n     console.log(\"clicked\")\r\n// Update this.state.employees such that they are sorted by their fist name. \r\n    this.setState ({ employees: [...this.state.employees].sort(   (function(a, b){return (a.name.first < b.name.first) ? -1 : 1}))\r\n    }); \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <table class=\"table table-striped table-dark\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Image</th>\r\n            <th scope=\"col\" onClick = {() => { this.sortByFirstName()}}>First Name</th>\r\n            <th scope=\"col\">Last Name</th>\r\n            <th scope=\"col\">Email</th>\r\n            <th scope=\"col\">Phone</th>\r\n            <th scope=\"col\">DOB</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        <EmployeeInfo EmployeeInfo={this.state.employees} />\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\nexport default Table;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Jumbo from \"./components/Jumbotron\";\nimport SearchForm from \"./components/SearchForm\";\nimport Table from \"./components/Table\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jumbo />\n      <SearchForm />\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}